<source>
  @type exec
  command "iperf3 #{ENV['IPERF_ARGS']} -J"
  <parse>
    @type json
  </parse>
  tag iperf.all
  run_interval "#{ENV['IPERF_RUN_INTERVAL']}"
</source>

<match iperf.all>
  @type rewrite_tag_filter
  <rule>
    key server_output_text
    pattern /.+/
    tag iperf.success
  </rule>
  <rule>
    key error
    pattern /.+/
    tag iperf.error
  </rule>
</match>

<filter iperf.error>
    @type record_transformer
    <record>
        event_type "iperf3_stats"
        server_connected "False"
        start.test_start.protocol "#{ENV['IPERF_PROTOCOL']}"
        iperf_cmdline "iperf3 #{ENV['IPERF_ARGS']} -J"
    </record>
</filter>

<filter iperf.success>
    @type record_transformer
    enable_ruby
    remove_keys $.intervals
    <record>
        event_type "iperf3_stats"
        server_connected "True"
        iperf_cmdline "iperf3 #{ENV['IPERF_ARGS']} -J"
        end.stream0 ${record.dig("end","streams")[0]}
    </record>
</filter>

<match iperf.success>
    @type http
    endpoint "#{ENV['VLOGS_URL']}/insert/jsonline"
    headers {"VL-Msg-Field": "server_output_text", "VL-Time-Field": "start.timestamp.timesecs", "VL-Stream-Fields": "event_type,title"}
    open_timeout 10
    read_timeout 10
    <buffer>
        flush_mode immediate
        chunk_limit_records 1
        compress gzip
        retry_timeout 5m
        retry_max_interval 5s
        delayed_commit_timeout 15s
        overflow_action drop_oldest_chunk
    </buffer>
</match>

<match iperf.error>
    @type http
    endpoint "#{ENV['VLOGS_URL']}/insert/jsonline"
    headers {"VL-Msg-Field": "error", "VL-Stream-Fields": "event_type,title"}
    open_timeout 10
    read_timeout 10
    <buffer>
        flush_mode immediate
        chunk_limit_records 1
        compress gzip
        retry_timeout 5m
        retry_max_interval 5s
        delayed_commit_timeout 15s
        overflow_action drop_oldest_chunk
    </buffer>
</match>
